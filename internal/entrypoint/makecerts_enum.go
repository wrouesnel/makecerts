// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package entrypoint

import (
	"fmt"

	"github.com/pkg/errors"
)

const (
	// CertOperationsCertificate is a CertOperations of type certificate.
	CertOperationsCertificate CertOperations = "certificate"
	// CertOperationsSign is a CertOperations of type sign.
	CertOperationsSign CertOperations = "sign"
	// CertOperationsRequest is a CertOperations of type request.
	CertOperationsRequest CertOperations = "request"
)

var ErrInvalidCertOperations = errors.New("not a valid CertOperations")

// String implements the Stringer interface.
func (x CertOperations) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x CertOperations) IsValid() bool {
	_, err := ParseCertOperations(string(x))
	return err == nil
}

var _CertOperationsValue = map[string]CertOperations{
	"certificate": CertOperationsCertificate,
	"sign":        CertOperationsSign,
	"request":     CertOperationsRequest,
}

// ParseCertOperations attempts to convert a string to a CertOperations.
func ParseCertOperations(name string) (CertOperations, error) {
	if x, ok := _CertOperationsValue[name]; ok {
		return x, nil
	}
	return CertOperations(""), fmt.Errorf("%s is %w", name, ErrInvalidCertOperations)
}
