// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package ca

import (
	"fmt"
	"strings"
)

const (
	// CaModeExisting is a CaMode of type existing.
	CaModeExisting CaMode = "existing"
	// CaModeGenerate is a CaMode of type generate.
	CaModeGenerate CaMode = "generate"
	// CaModeGenerateCsr is a CaMode of type generate-csr.
	CaModeGenerateCsr CaMode = "generate-csr"
)

var ErrInvalidCaMode = fmt.Errorf("not a valid CaMode, try [%s]", strings.Join(_CaModeNames, ", "))

var _CaModeNames = []string{
	string(CaModeExisting),
	string(CaModeGenerate),
	string(CaModeGenerateCsr),
}

// CaModeNames returns a list of possible string values of CaMode.
func CaModeNames() []string {
	tmp := make([]string, len(_CaModeNames))
	copy(tmp, _CaModeNames)
	return tmp
}

// String implements the Stringer interface.
func (x CaMode) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x CaMode) IsValid() bool {
	_, err := ParseCaMode(string(x))
	return err == nil
}

var _CaModeValue = map[string]CaMode{
	"existing":     CaModeExisting,
	"generate":     CaModeGenerate,
	"generate-csr": CaModeGenerateCsr,
}

// ParseCaMode attempts to convert a string to a CaMode.
func ParseCaMode(name string) (CaMode, error) {
	if x, ok := _CaModeValue[name]; ok {
		return x, nil
	}
	return CaMode(""), fmt.Errorf("%s is %w", name, ErrInvalidCaMode)
}
